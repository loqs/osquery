/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "osquery_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace osquery { namespace extensions {

int _kExtensionCodeValues[] = {
  ExtensionCode::EXT_SUCCESS,
  ExtensionCode::EXT_FAILED,
  ExtensionCode::EXT_FATAL
};
const char* _kExtensionCodeNames[] = {
  "EXT_SUCCESS",
  "EXT_FAILED",
  "EXT_FATAL"
};
const std::map<int, const char*> _ExtensionCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kExtensionCodeValues, _kExtensionCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const ExtensionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ExtensionCode_VALUES_TO_NAMES.find(val);
  if (it != _ExtensionCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ExtensionCode::type& val) {
  std::map<int, const char*>::const_iterator it = _ExtensionCode_VALUES_TO_NAMES.find(val);
  if (it != _ExtensionCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


InternalOptionInfo::~InternalOptionInfo() noexcept {
}


void InternalOptionInfo::__set_value(const std::string& val) {
  this->value = val;
}

void InternalOptionInfo::__set_default_value(const std::string& val) {
  this->default_value = val;
}

void InternalOptionInfo::__set_type(const std::string& val) {
  this->type = val;
}
std::ostream& operator<<(std::ostream& out, const InternalOptionInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InternalOptionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->default_value);
          this->__isset.default_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InternalOptionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InternalOptionInfo");

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("default_value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->default_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InternalOptionInfo &a, InternalOptionInfo &b) {
  using ::std::swap;
  swap(a.value, b.value);
  swap(a.default_value, b.default_value);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

InternalOptionInfo::InternalOptionInfo(const InternalOptionInfo& other0) {
  value = other0.value;
  default_value = other0.default_value;
  type = other0.type;
  __isset = other0.__isset;
}
InternalOptionInfo& InternalOptionInfo::operator=(const InternalOptionInfo& other1) {
  value = other1.value;
  default_value = other1.default_value;
  type = other1.type;
  __isset = other1.__isset;
  return *this;
}
void InternalOptionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InternalOptionInfo(";
  out << "value=" << to_string(value);
  out << ", " << "default_value=" << to_string(default_value);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


InternalExtensionInfo::~InternalExtensionInfo() noexcept {
}


void InternalExtensionInfo::__set_name(const std::string& val) {
  this->name = val;
}

void InternalExtensionInfo::__set_version(const std::string& val) {
  this->version = val;
}

void InternalExtensionInfo::__set_sdk_version(const std::string& val) {
  this->sdk_version = val;
}

void InternalExtensionInfo::__set_min_sdk_version(const std::string& val) {
  this->min_sdk_version = val;
}
std::ostream& operator<<(std::ostream& out, const InternalExtensionInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t InternalExtensionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sdk_version);
          this->__isset.sdk_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->min_sdk_version);
          this->__isset.min_sdk_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InternalExtensionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InternalExtensionInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sdk_version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sdk_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_sdk_version", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->min_sdk_version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InternalExtensionInfo &a, InternalExtensionInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.version, b.version);
  swap(a.sdk_version, b.sdk_version);
  swap(a.min_sdk_version, b.min_sdk_version);
  swap(a.__isset, b.__isset);
}

InternalExtensionInfo::InternalExtensionInfo(const InternalExtensionInfo& other2) {
  name = other2.name;
  version = other2.version;
  sdk_version = other2.sdk_version;
  min_sdk_version = other2.min_sdk_version;
  __isset = other2.__isset;
}
InternalExtensionInfo& InternalExtensionInfo::operator=(const InternalExtensionInfo& other3) {
  name = other3.name;
  version = other3.version;
  sdk_version = other3.sdk_version;
  min_sdk_version = other3.min_sdk_version;
  __isset = other3.__isset;
  return *this;
}
void InternalExtensionInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InternalExtensionInfo(";
  out << "name=" << to_string(name);
  out << ", " << "version=" << to_string(version);
  out << ", " << "sdk_version=" << to_string(sdk_version);
  out << ", " << "min_sdk_version=" << to_string(min_sdk_version);
  out << ")";
}


ExtensionStatus::~ExtensionStatus() noexcept {
}


void ExtensionStatus::__set_code(const int32_t val) {
  this->code = val;
}

void ExtensionStatus::__set_message(const std::string& val) {
  this->message = val;
}

void ExtensionStatus::__set_uuid(const ExtensionRouteUUID val) {
  this->uuid = val;
}
std::ostream& operator<<(std::ostream& out, const ExtensionStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtensionStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uuid);
          this->__isset.uuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtensionStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtensionStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uuid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->uuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtensionStatus &a, ExtensionStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.uuid, b.uuid);
  swap(a.__isset, b.__isset);
}

ExtensionStatus::ExtensionStatus(const ExtensionStatus& other4) {
  code = other4.code;
  message = other4.message;
  uuid = other4.uuid;
  __isset = other4.__isset;
}
ExtensionStatus& ExtensionStatus::operator=(const ExtensionStatus& other5) {
  code = other5.code;
  message = other5.message;
  uuid = other5.uuid;
  __isset = other5.__isset;
  return *this;
}
void ExtensionStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtensionStatus(";
  out << "code=" << to_string(code);
  out << ", " << "message=" << to_string(message);
  out << ", " << "uuid=" << to_string(uuid);
  out << ")";
}


ExtensionResponse::~ExtensionResponse() noexcept {
}


void ExtensionResponse::__set_status(const ExtensionStatus& val) {
  this->status = val;
}

void ExtensionResponse::__set_response(const ExtensionPluginResponse& val) {
  this->response = val;
}
std::ostream& operator<<(std::ostream& out, const ExtensionResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtensionResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->response.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->response.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              {
                this->response[_i10].clear();
                uint32_t _size11;
                ::apache::thrift::protocol::TType _ktype12;
                ::apache::thrift::protocol::TType _vtype13;
                xfer += iprot->readMapBegin(_ktype12, _vtype13, _size11);
                uint32_t _i15;
                for (_i15 = 0; _i15 < _size11; ++_i15)
                {
                  std::string _key16;
                  xfer += iprot->readString(_key16);
                  std::string& _val17 = this->response[_i10][_key16];
                  xfer += iprot->readString(_val17);
                }
                xfer += iprot->readMapEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtensionResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtensionResponse");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("response", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_MAP, static_cast<uint32_t>(this->response.size()));
    std::vector<std::map<std::string, std::string> > ::const_iterator _iter18;
    for (_iter18 = this->response.begin(); _iter18 != this->response.end(); ++_iter18)
    {
      {
        xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter18).size()));
        std::map<std::string, std::string> ::const_iterator _iter19;
        for (_iter19 = (*_iter18).begin(); _iter19 != (*_iter18).end(); ++_iter19)
        {
          xfer += oprot->writeString(_iter19->first);
          xfer += oprot->writeString(_iter19->second);
        }
        xfer += oprot->writeMapEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtensionResponse &a, ExtensionResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.response, b.response);
  swap(a.__isset, b.__isset);
}

ExtensionResponse::ExtensionResponse(const ExtensionResponse& other20) {
  status = other20.status;
  response = other20.response;
  __isset = other20.__isset;
}
ExtensionResponse& ExtensionResponse::operator=(const ExtensionResponse& other21) {
  status = other21.status;
  response = other21.response;
  __isset = other21.__isset;
  return *this;
}
void ExtensionResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtensionResponse(";
  out << "status=" << to_string(status);
  out << ", " << "response=" << to_string(response);
  out << ")";
}


ExtensionException::~ExtensionException() noexcept {
}


void ExtensionException::__set_code(const int32_t val) {
  this->code = val;
}

void ExtensionException::__set_message(const std::string& val) {
  this->message = val;
}

void ExtensionException::__set_uuid(const ExtensionRouteUUID val) {
  this->uuid = val;
}
std::ostream& operator<<(std::ostream& out, const ExtensionException& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ExtensionException::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uuid);
          this->__isset.uuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExtensionException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ExtensionException");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uuid", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->uuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExtensionException &a, ExtensionException &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.message, b.message);
  swap(a.uuid, b.uuid);
  swap(a.__isset, b.__isset);
}

ExtensionException::ExtensionException(const ExtensionException& other22) : TException() {
  code = other22.code;
  message = other22.message;
  uuid = other22.uuid;
  __isset = other22.__isset;
}
ExtensionException& ExtensionException::operator=(const ExtensionException& other23) {
  code = other23.code;
  message = other23.message;
  uuid = other23.uuid;
  __isset = other23.__isset;
  return *this;
}
void ExtensionException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ExtensionException(";
  out << "code=" << to_string(code);
  out << ", " << "message=" << to_string(message);
  out << ", " << "uuid=" << to_string(uuid);
  out << ")";
}

const char* ExtensionException::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ExtensionException";
  }
}

}} // namespace
